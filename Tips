#map作成高速化
unordered_set: https://cpprefjp.github.io/reference/unordered_set/unordered_set.html
unordered_set<int> S; 
rep(i,N){
    rep(j,M){
      rep(k,L){
        sum = A[i]+B[j]+C[k];
        S.insert(sum);
      }
    }
}

#連想配列
/*
連想配列とは通常の配列の拡張のようなもので、配列の添字では
0,1,2,… と
0 以上の連続する整数を用いるのに対して、連想配列では添字を好きな値や型などを用いることができます。
初期化段階では添字が存在せず、添字の追加・削除、ある添字に対応する値の変更、添字の種類数の取得などの操作が定数時間や対数時間などで高速に行えます。
*/
map<int, int> test;

#最大，最小取得
// xはvector or array or 配列
int min = *min_element(begin(x), end(x));
int max = *max_element(begin(x), end(x));

#値を検索して削除する．
// 最大値がなくなるまで繰り返し削除
auto itr = find(begin(a), end(a), delete_value);
while (itr != end(a)) {
    a.erase(itr);
    itr = find(begin(a), end(a), delete_value);
}

#文字列からある文字を削除
S.erase(std::remove(S.begin(), S.end(), search_char), S.end());

#文字列からある文字の数を求める
count = std::count(S.begin(), S.end(), search_char);

#前からある文字を検索
size_t findPos;
findPos = S.find_first_of('a');
